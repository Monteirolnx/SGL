@layout MainLayout

@using Radzen
@using Radzen.Blazor
@using System;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using System.Linq;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.Extensions.Configuration;


@if (sistemas == null && erroRetornoAPI == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    <h4>Carregando...</h4>
}
else if (sistemas != null || erroRetornoAPI?.Message != null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Max="100" Style="margin-bottom: 20px" />
    <RadzenHeading Size="H2" Text="Sistemas"></RadzenHeading>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Adicionar Sistema" Click="@Adicionar"></RadzenButton>
    @if (sistemas != null)
    {
        <RadzenContent Container="main">
            <ChildContent>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenDataGrid @ref="GridObtemTodosSistemas"
                                AllowFiltering="true"
                                AllowColumnResize="true"
                                EmptyText="A pesquisa não retornou resultados."
                                FilterMode="FilterMode.Simple"
                                PageSize="100"
                                PageSizeOptions="@(new int[] { 25,50,75,100 })"
                                PagerPosition="PagerPosition.TopAndBottom"
                                AllowPaging="true"
                                AllowSorting="true"

                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                LogicalFilterOperator="LogicalFilterOperator.Or"
                                AllowVirtualization="true"
                                Data="@sistemas"
                                TItem="Sistema">
                            <Columns>
                                <RadzenDataGridColumn TItem="Sistema" Property="Id" Filterable="true" Title="ID" Frozen="false" Width="70px" TextAlign="TextAlign.Center" />
                                <RadzenDataGridColumn TItem="Sistema" Property="Nome" Title="Nome" />
                                <RadzenDataGridColumn TItem="Sistema" Property="UrlServicoConsultaLog" Title="Url Servico ConsultaLog" />
                                <RadzenDataGridColumn TItem="Sistema" Property="UsuarioLogin" Title="Usuario Login"/>

                                <RadzenDataGridColumn TItem="Sistema" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
                                    <Template Context="edicao">
                                        <RadzenButton ButtonStyle="ButtonStyle.Info" Text="Editar" Icon="edit" Size="ButtonSize.Small" Click="@(() => GridEditButtonClick(edicao))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Sistema" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
                                    <Template Context="exclusao">
                                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Excluir" Icon="close" Size="ButtonSize.Small" Click="@((args) => GridDeleteButtonClick(args, exclusao))" @onclick:stopPropagation="true">
                                        </RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </ChildContent>
        </RadzenContent>
    }
    else
    {
        <p>@erroRetornoAPI.Message</p>
    }
}


@code {
    protected List<Sistema> sistemas;

    protected ErroRetornoAPI erroRetornoAPI;

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected IConfiguration Configuration { get; set; }

    [Inject]
    protected HttpClient HttpClient { get; set; }

    [Inject]
    protected RadzenDataGrid<Sistema> GridObtemTodosSistemas { get; set; }

    protected async override void OnInitialized()
    {
        await Load();
    }

    private async Task Load()
    {
        HttpResponseMessage response = await APIObtemTodosSistemas();
        if (response.IsSuccessStatusCode)
        {
            sistemas = await response.Content.ReadFromJsonAsync<List<Sistema>>();
            if (erroRetornoAPI != null)
                erroRetornoAPI.Message = string.Empty;
        }
        else
        {
            erroRetornoAPI = await response.Content.ReadFromJsonAsync<ErroRetornoAPI>();
        }
        StateHasChanged();
    }

    public void Reload()
    {
        InvokeAsync(StateHasChanged);
    }

    protected async Task<HttpResponseMessage> APIObtemTodosSistemas()
    {
        try
        {
            string serviceEndpoint = "api/ObtemTodosSistemas/ObtemTodos";
            UriBuilder uriBuilder = new(string.Concat(Configuration["EnderecoBaseSGLAPI"], serviceEndpoint));
            return await HttpClient.GetAsync(uriBuilder.Uri);
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected void Adicionar(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("cadastros/sistemas/adicionasistema");
    }

    protected void GridEditButtonClick(dynamic data)
    {
        NavigationManager.NavigateTo($"cadastros/sistemas/editasistema/{data.Id}");
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, dynamic data)
    {
        try
        {
            if (await DialogService.Confirm("Deseja excluir o Sistema selecionado?",title:"Confirma") == true)
            {
                HttpResponseMessage response = await APIDeletaSistema(data.Id);
                if (response.IsSuccessStatusCode)
                {
                    sistemas.RemoveAll(x => x.Id == data.Id);

                    await GridObtemTodosSistemas.Reload();
                }
                else
                {
                    erroRetornoAPI = await response.Content.ReadFromJsonAsync<ErroRetornoAPI>();
                    NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Erro", Detail = erroRetornoAPI.Message });
                }
            }
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Erro", Detail = $"Não foi possível deletar o sistema." });
        }
    }

    private async Task<HttpResponseMessage> APIDeletaSistema(dynamic id)
    {
        try
        {
            string serviceEndpoint = $"api/DeletaSistema/Deleta/{id}";
            UriBuilder uriBuilder = new(string.Concat(Configuration["EnderecoBaseSGLAPI"], serviceEndpoint));
            return await HttpClient.DeleteAsync(uriBuilder.Uri);
        }
        catch (Exception)
        {
            throw;
        }
    }

    public record Sistema
    {
        public int Id { get; init; }

        public string Nome { get; init; }

        public string UrlServicoConsultaLog { get; init; }

        public string UsuarioLogin { get; init; }

        public string UsuarioSenha { get; init; }
    }

    public class ErroRetornoAPI
    {
        public string Message { get; set; }
    }
}