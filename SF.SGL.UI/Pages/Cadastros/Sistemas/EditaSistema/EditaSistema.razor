@page "/cadastros/sistemas/editasistema/{id:int}"
@layout MainLayout

@using Radzen
@using Radzen.Blazor
@using System;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.Extensions.Configuration;


@if (sistema == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
    <h4>Carregando...</h4>
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Max="100" Style="margin-bottom: 20px" />
    <RadzenContent Container="main">
        <ChildContent>
            <RadzenHeading Size="H2" Text="Editar Sistema"></RadzenHeading>
              <div class="row">
            <div class="col-md-6">
                <RadzenTemplateForm Data="@sistema" Visible="@(sistema != null)" TItem="Sistema" Submit="@FormSubmit">
                    <ChildContent>
                        <RadzenFieldset Text="Parametrizar sistema">
                            <div style="margin-bottom: 1rem" class="row">
                                <div class="col-md-12">
                                    <RadzenLabel Text="Nome:" Component="nm_sistema" style="width: 100%"></RadzenLabel>
                                    <RadzenTextBox MaxLength="100" style="display: block; width: 100%" @bind-Value="@sistema.Nome" Name="Nm_sistema">
                                    </RadzenTextBox>
                                    <RadzenRequiredValidator Component="Nm_sistema" Text="Nome do sistema é obrigatório." style="position: absolute">
                                    </RadzenRequiredValidator>
                                </div>
                            </div>
                            <RadzenFieldset Text="Informações de acesso ao serviço">
                                <div style="margin-bottom: 1rem" class="row">
                                    <div class="col-md-12">
                                        <RadzenLabel Text="URL:" Component="nm_url_servico_consulta_log" style="width: 100%"></RadzenLabel>
                                        <RadzenTextBox MaxLength="255" style="display: block; width: 100%" @bind-Value="@sistema.UrlServicoConsultaLog" Name="Nm_url_servico_consulta_log">
                                        </RadzenTextBox>
                                        <RadzenRequiredValidator Component="Nm_url_servico_consulta_log" Text="Url de acesso ao serviço é obrigatória." style="position: absolute">
                                        </RadzenRequiredValidator>
                                    </div>
                                </div>
                                <div style="margin-bottom: 1rem" class="row">
                                    <div class="col-md-12">
                                        <RadzenLabel Text="Usuário:" Component="nm_usuario_servico_consulta_log" style="width: 100%"></RadzenLabel>
                                        <RadzenTextBox MaxLength="200" style="display: block; width: 100%" @bind-Value="@sistema.UsuarioLogin" Name="Nm_usuario_servico_consulta_log">
                                        </RadzenTextBox>
                                        <RadzenRequiredValidator Component="Nm_usuario_servico_consulta_log" Text="Login do usuário de acesso ao serviço é obrigatório." style="position: absolute">
                                        </RadzenRequiredValidator>
                                    </div>
                                </div>
                                <div style="margin-bottom: 1rem" class="row">
                                    <div class="col-md-12">
                                        <RadzenLabel Text="Senha:" Component="nm_senha_servico_consulta_log" style="width: 100%"></RadzenLabel>
                                        <RadzenTextBox MaxLength="200" style="display: block; width: 100%" @bind-Value="@sistema.UsuarioSenha" Name="Nm_senha_servico_consulta_log">
                                        </RadzenTextBox>
                                        <RadzenRequiredValidator Component="Nm_senha_servico_consulta_log" Text="Senha do usuário de acesso ao serviço é obrigatória." style="position: absolute">
                                        </RadzenRequiredValidator>
                                    </div>
                                </div>
                            </RadzenFieldset>
                            <br />
                            <div class="row">
                                <div class="col-md-12" style="display:flex; justify-content:flex-end; width:100%; padding:1;">
                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Salvar" ButtonStyle="ButtonStyle.Primary" Style="width: 150px; margin-right:5px"></RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="close" Text="Cancelar" Click="@ButtonCancelClick" Style="width: 150px;"></RadzenButton>
                                </div>
                            </div>
                        </RadzenFieldset>
                    </ChildContent>
                </RadzenTemplateForm>
            </div>
        </div>
        </ChildContent>
    </RadzenContent>
}

@code{
        protected Sistema sistema;

        protected ErroRetornoAPI erroRetornoAPI;

        [Parameter(CaptureUnmatchedValues = true)]
        public IReadOnlyDictionary<string, dynamic> Attributes { get; set; }

        public void Reload()
        {
            InvokeAsync(StateHasChanged);
        }

        [Inject]
        protected NavigationManager NavigationManager { get; set; }

        [Inject]
        protected DialogService DialogService { get; set; }

        [Inject]
        protected TooltipService TooltipService { get; set; }

        [Inject]
        protected NotificationService NotificationService { get; set; }

        [Inject]
        protected IConfiguration Configuration { get; set; }

        [Inject]
        protected HttpClient HttpClient { get; set; }

        [Parameter]
        public int id { get; set; }

        protected override async Task OnInitializedAsync()
        {
            await Load();
        }
        protected async Task Load()
        {
            HttpResponseMessage httpResponseMessage = await APIObtemSistemaPorId(id);
            if (httpResponseMessage.IsSuccessStatusCode)
            {
                sistema = await httpResponseMessage.Content.ReadFromJsonAsync<Sistema>();
                if (erroRetornoAPI != null)
                {
                    erroRetornoAPI.Message = string.Empty;
                }
            }
            else
            {
                erroRetornoAPI = await httpResponseMessage.Content.ReadFromJsonAsync<ErroRetornoAPI>();
                sistema = null;
            }
        }

        private async Task<HttpResponseMessage> APIObtemSistemaPorId(int id)
        {
            try
            {
                string serviceEndpoint = $"api/EditaSistema/ObtemSistemaPorId/{id}";
                UriBuilder uriBuilder = new(string.Concat(Configuration["EnderecoBaseSGLAPI"], serviceEndpoint));
                return await HttpClient.GetAsync(uriBuilder.Uri);
            }
            catch (Exception)
            {
                throw;
            }
        }

        protected async Task FormSubmit()
        {
            HttpResponseMessage httpResponseMessage = await APIEditaSistema(id, sistema);
            if (httpResponseMessage.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("cadastros/sistemas");
            }
            else
            {
                erroRetornoAPI = await httpResponseMessage.Content.ReadFromJsonAsync<ErroRetornoAPI>();
                sistema = null;
                NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = $"Error", Detail = erroRetornoAPI.Message });
            }
            StateHasChanged();
        }

        private async Task<HttpResponseMessage> APIEditaSistema(int id, Sistema sistema)
        {
            try
            {
                string serviceEndpoint = $"api/EditaSistema/Edita/{id}";
                UriBuilder uriBuilder = new(string.Concat(Configuration["EnderecoBaseSGLAPI"], serviceEndpoint));
                return await HttpClient.PutAsJsonAsync(uriBuilder.Uri, sistema);
            }
            catch (Exception)
            {
                throw;
            }
        }

        protected void ButtonCancelClick(MouseEventArgs args)
        {
            NavigationManager.NavigateTo("cadastros/sistemas");
        }
    
    public class Sistema
    {
        public int Id { get; set; }

        public string Nome { get; set; }

        public string UrlServicoConsultaLog { get; set; }

        public string UsuarioLogin { get; set; }

        public string UsuarioSenha { get; set; }
    }

    public class ErroRetornoAPI
    {
        public string Message { get; set; }
    }
}