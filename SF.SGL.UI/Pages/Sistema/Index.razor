@page "/sistema/"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h2>Sistemas</h2>
<div class="row">
    <a class="btn btn-success float-right" href='/sistemas/incluir'><i class="oi oi-plus"></i>Adicionar Sistema</a>
</div>

@if (retornoAPI == null && mensagemErro?.Message == null)
{
    <p>Carregando...</p>
}
else if (retornoAPI != null)
{
    <div class="row" style="padding-top:10px">
        <div class="col-md-2">
            <label class="control-label">Mostrar até </label>
        </div>
        <div class="col-md-2">
            <select class="form-control" @onchange="QuantidadeRegPagClicked">
                <option value="2">2</option>
                <option value="5">5</option>
                <option value="7">7</option>
                <option value="10">10</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="control-label">resultados por página.</label>
        </div>
    </div>

    <div class="form-actions no-color">
        <p>
            <input type="text" @bind="@retornoAPI.CurrentFilter" @oninput="@((e) => { retornoAPI.CurrentFilter=(string)e.Value;})" />
            <button class="btn btn-primary" @onclick="Pesquisar">Pesquisar</button>
        </p>
    </div>

    <table class='table'>
        <thead>
            <tr>
                <th>Nome:</th>
                <th>UrlServicoConsultaLog:</th>
                <th>UsuarioLogin:</th>
                <th>UsuarioSenha:</th>
                <th>Ação:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resultado in retornoAPI.Resultados)
            {
                <tr>
                    <td>@resultado.Nome</td>
                    <td>@resultado.UrlServicoConsultaLog</td>
                    <td>@resultado.UsuarioLogin</td>
                    <td>@resultado.UsuarioSenha</td>
                    <td>
                        <a href='/sistemas/edita/@resultado.Id'>Editar</a>
                        <a href='/sistemas/deleta/@resultado.Id'>Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    var anteriorDesabilitado = !retornoAPI.ExistePaginaAnterior;
    var proximoDesabilitado = !retornoAPI.ExisteProximaPagina;

    <button class="btn btn-primary" disabled="@anteriorDesabilitado" @onclick="PaginaAnterior">Anterior</button>
    <button class="btn btn-primary" disabled="@proximoDesabilitado" @onclick="ProximaPagina">Próximo</button>
}
else
{
    @mensagemErro?.Message
    @exceptionMessage
    <div class="row">
        <input type="button" class="btn" @onclick="@Voltar" value="Voltar" />
    </div>
}


@code {
    private const string ServiceEndpoint = "api/Sistemas/ObtemTodosSistemasPaginado";
    private Resultado retornoAPI;
    private Retorno mensagemErro;
    public int tamanhoPagina;

    private string exceptionMessage;
    
    protected override async Task OnInitializedAsync()
    {
        tamanhoPagina = 2;
        await ChamarAPI(retornoAPI?.CurrentFilter, retornoAPI?.NumeroPagina, tamanhoPagina);
    }

    protected async Task Pesquisar()
    {
        if (retornoAPI != null)
        {
            retornoAPI.NumeroPagina = 1;
        }
        await ChamarAPI(retornoAPI?.CurrentFilter, retornoAPI?.NumeroPagina, tamanhoPagina);
    }

    protected async void QuantidadeRegPagClicked(ChangeEventArgs changeEventArgs)
    {
        tamanhoPagina = Convert.ToInt32(changeEventArgs.Value);
        if (retornoAPI != null)
        {
            retornoAPI.NumeroPagina = 1;
        }

        await ChamarAPI(retornoAPI?.CurrentFilter, retornoAPI?.NumeroPagina, tamanhoPagina);
    }

    protected async Task PaginaAnterior()
    {
        retornoAPI.NumeroPagina = retornoAPI.NumeroPagina - 1;
        await ChamarAPI(retornoAPI?.CurrentFilter, retornoAPI?.NumeroPagina, tamanhoPagina);
    }

    protected async Task ProximaPagina()
    {
        retornoAPI.NumeroPagina = retornoAPI.NumeroPagina + 1;
        await ChamarAPI(retornoAPI?.CurrentFilter, retornoAPI?.NumeroPagina, tamanhoPagina);
    }

    protected async Task ChamarAPI(string filtroAtual, int? numeroPagina, int tamanhoPagina)
    {
        try
        {
            UriBuilder uriBuilder = new UriBuilder(string.Concat(Configuration["EnderecoBaseSGLAPI"], ServiceEndpoint));
            uriBuilder.Query = $"sortOrder=&currentFilter=&palavraChave={retornoAPI?.CurrentFilter}&numeroPagina={retornoAPI?.NumeroPagina}&tamanhoPagina={tamanhoPagina}";

            HttpResponseMessage chamadaAPI = await Http.GetAsync(uriBuilder.Uri);

            if (chamadaAPI.IsSuccessStatusCode)
            {
                retornoAPI = await chamadaAPI.Content.ReadFromJsonAsync<Resultado>();
                if (mensagemErro != null)
                {
                    mensagemErro.Message = string.Empty;
                    exceptionMessage = string.Empty;
                }
            }
            else
            {
                mensagemErro = await chamadaAPI.Content.ReadFromJsonAsync<Retorno>();
                retornoAPI = null;
            }
            StateHasChanged();
        }
        catch (Exception exception)
        {
            exceptionMessage = exception.Message;
        }
    }

    void Voltar()
    {
        NavigationManager.NavigateTo("sistema",true);
    }

    internal class Resultado
    {
        public string CurrentSort { get; set; }

        public string NameSortParm { get; set; }

        public string DateSortParm { get; set; }

        public string CurrentFilter { get; set; }

        public string SearchString { get; set; }

        public int? NumeroPagina { get; set; }

        public int TotalPaginas { get; set; }

        public bool ExistePaginaAnterior { get; set; }

        public bool ExisteProximaPagina { get; set; }

        public List<Sistema> Resultados { get; init; }
    }

    internal class Sistema
    {
        public int Id { get; set; }

        public string Nome { get; set; }

        public string UrlServicoConsultaLog { get; set; }

        public string UsuarioLogin { get; set; }

        public string UsuarioSenha { get; set; }
    }

    internal class Retorno
    {
        public string Message { get; set; }
    }
}
