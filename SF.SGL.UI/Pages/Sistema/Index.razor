@page "/sistema/"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject HttpClient Http

    <div class="row">
        <h2>Sistemas</h2>
        <a class="btn btn-success float-right" href='/sistemas/incluir'><i class="oi oi-plus"></i></a>
    </div>

<p>
    <a href="/sistemas/adiciona">Adicionar Sistema</a>
</p>

@if (resultado != null)
{
    <table class='table'>
        <thead>
            <tr>
                <th>Nome:</th>
                <th>UrlServicoConsultaLog:</th>
                <th>UsuarioLogin:</th>
                <th>UsuarioSenha:</th>
                <th>Ação:</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resultado in resultado.Resultados)
            {
                <tr>
                    <td>@resultado.Nome</td>
                    <td>@resultado.UrlServicoConsultaLog</td>
                    <td>@resultado.UsuarioLogin</td>
                    <td>@resultado.UsuarioSenha</td>
                    <td>
                        <a href='/sistemas/edita/@resultado.Id'>Editar</a>
                        <a href='/sistemas/deleta/@resultado.Id'>Deletar</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    var anteriorDisabilitado = !resultado.ExistePaginaAnterior ? "disabled" : "";
    var proximoDisabilitado = !resultado.ExisteProximaPagina ? "disabled" : "";

    <button class="btn btn-primary @anteriorDisabilitado" @onclick="PaginaAnterior">Anterior</button>
    <button class="btn btn-primary @proximoDisabilitado" @onclick="ProximaPagina">Próximo</button>
}
else if (retorno?.Message != null)
{
    @retorno.Message
}

<p>
    @exceptionMessage
</p>

@code {
    private const string ServiceEndpoint = "api/Sistemas/ObtemTodosSistemasPaginado";
    private Resultado resultado;
    private Retorno retorno;

    private string exceptionMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UriBuilder uriBuilder = new UriBuilder(string.Concat(Configuration["EnderecoBaseSGLAPI"], ServiceEndpoint));
            uriBuilder.Query = "sortOrder=&currentFilter=&palavraChave=&numeroPagina=&tamanhoPagina=1";

            HttpResponseMessage chamadaAPI = await Http.GetAsync(uriBuilder.Uri);

            if (chamadaAPI.IsSuccessStatusCode)
            {
                resultado = await chamadaAPI.Content.ReadFromJsonAsync<Resultado>();
            }
            else
            {
                retorno = await chamadaAPI.Content.ReadFromJsonAsync<Retorno>();
            }

        }
        catch (Exception exception)
        {
            exceptionMessage = exception.Message;
        }
    }

    protected async Task PaginaAnterior()
    {

    }

    protected async Task ProximaPagina()
    {
        //try
        //{
        //    resultado.PageIndex
        //    UriBuilder uriBuilder = new UriBuilder(string.Concat(Configuration["EnderecoBaseSGLAPI"], ServiceEndpoint));
        //    uriBuilder.Query = "sortOrder=&currentFilter=&palavraChave=&numeroPagina=&tamanhoPagina=1";

        //    HttpResponseMessage chamadaAPI = await Http.GetAsync(uriBuilder.Uri);

        //    if (chamadaAPI.IsSuccessStatusCode)
        //    {
        //        resultado = await chamadaAPI.Content.ReadFromJsonAsync<Resultado>();
        //    }
        //    else
        //    {
        //        retorno = await chamadaAPI.Content.ReadFromJsonAsync<Retorno>();
        //    }

        //}
        //catch (Exception exception)
        //{
        //    exceptionMessage = exception.Message;
        //}
    }

    internal class Resultado
    {
        public string CurrentSort { get; init; }

        public string NameSortParm { get; init; }

        public string DateSortParm { get; init; }

        public string CurrentFilter { get; init; }

        public string SearchString { get; init; }

        public int PageIndex { get; internal set; }

        public int TotalPages { get; internal set; }

        public bool ExistePaginaAnterior { get; set; }

        public bool ExisteProximaPagina { get; set; }

        public List<Sistema> Resultados { get; init; }
    }

    internal class Sistema
    {
        public int Id { get; set; }

        public string Nome { get; set; }

        public string UrlServicoConsultaLog { get; set; }

        public string UsuarioLogin { get; set; }

        public string UsuarioSenha { get; set; }
    }

    internal class Retorno
    {
        public string Message { get; set; }
    }
}
